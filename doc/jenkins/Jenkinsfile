pipeline {
    agent any

    environment {
        NVM_DIR = "/var/lib/jenkins/.nvm"
        DEPLOY_FRONTEND_DIR = "/var/www/project2AyD2"
        NODE_VERSION = "22.14.0"
    }

    stages {
        
        stage('Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/FernandoJRR/Proyecto2AyD2-Front.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    //Changes on package.json
                    def changes = sh(script: 'git --no-pager diff --name-only HEAD~1 HEAD || true | grep package.json || true', returnStdout: true).trim()
                    def exists_node_modules = sh(script: 'test -d node_modules', returnStatus: true) == 0
                    if (changes || !exists_node_modules) {
                        echo "üîß Cargando NVM y usando Node.js $NODE_VERSION..."
                        sh """
                            export NVM_DIR="$NVM_DIR"
                            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                            nvm use $NODE_VERSION

                            echo "üì¶ Instalando dependencias..."
                            #npm install --legacy-peer-deps
                            rm -rf node_modules package-lock.json
                            npm install
                        """
                    } else {
                        echo "üîß No se detectaron cambios en package.json, no es necesario instalar dependencias."
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    echo "üöÄ Compilando frontend..."
                    echo "üîß Cargando NVM y usando Node.js $NODE_VERSION..."
                    sh """
                        export NVM_DIR="$NVM_DIR"
                        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                        nvm use $NODE_VERSION
                        echo "üèóÔ∏è Ejecutando build frontend..."
                        npm run build
                    """
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                script {
                    echo "üöö Desplegando frontend..."
                    sh """
                        export NVM_DIR="$NVM_DIR"
                        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                        nvm use $NODE_VERSION

                        echo "üßπ Limpiando el deploy anterior de frontend en $DEPLOY_FRONTEND_DIR ..."
                        rm -rf $DEPLOY_FRONTEND_DIR/*

                        echo "üöö Copiando build a $DEPLOY_FRONTEND_DIR ..."
                        rsync -av --delete .output/ $DEPLOY_FRONTEND_DIR/
                    """
                }
            }
        }
        
        //stage('Deploy Frontend') {
        //     steps {
        //         script {
        //             echo "üöö Desplegando frontend..."
        //             sh """
        //                 export NVM_DIR="$NVM_DIR"
        //                 [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
        //                 nvm use $NODE_VERSION

        //                 echo "üõë Deteniendo PM2 frontend si existe..."
        //                 pm2 stop frontend || true

        //                 echo "üßπ Limpiando el deploy anterior de frontend en $DEPLOY_FRONTEND_DIR ..."
        //                 rm -rf $DEPLOY_FRONTEND_DIR/*

        //                 echo "üöö Copiando build a $DEPLOY_FRONTEND_DIR ..."
        //                 rsync -av --delete .output/ $DEPLOY_FRONTEND_DIR/

        //                 echo "‚úÖ Reiniciando PM2 frontend..."
        //                 pm2 start frontend || pm2 restart frontend

        //                 echo "üìù Logs de PM2 frontend..."
        //                 pm2 logs frontend --lines 20 --nostream
        //             """
        //         }
        //     }
        // }
    }

    post {
        success {
            echo "üéâ Pipeline completado con √©xito."
        }
        failure {
            echo "‚ùå Algo fall√≥ en el pipeline."
        }
    }
}
